{
  "noteRecords": [
    {
      "title": "computer science",
      "note_id": "d063f3c6-6d0d-4ae0-a1cd-e739d80f7372",
      "markdown": "",
      "status": "active"
    },
    {
      "title": "intro to python",
      "note_id": "c5beeea6-4b22-40c5-a6bb-5b2f19132a59",
      "markdown": "# intro to python\n\n## Overloaded Operators\n<2024-01-15T04:41:49.172Z> \n- Operators can be overloaded, allowing them to behave differently based on their context.\n- Example: combining a number with a string using multiplication will result in a new string with the specified number of replicas.\n- Example: two strings can be combined using the addition operator.\n\n## Static Semantics\n<2024-01-15T05:11:23.224Z>\nIn the context of programming, static semantics is highlighted as an important factor. It involves the analysis of a program's text to determine its meaning, even before it is run.\n\n\n## Type Checking in Python\n<2024-01-15T05:12:24.228Z>\n- Python performs type checking to detect data type-related errors.\n- Inconsistencies in type checking can lead to issues downstream.\n- Different programming languages exhibit a spectrum of type checking, ranging from weak to strong typing.\n\n<2024-01-15T05:13:16.223Z>\nThe lecturer highlights the differences in type checking in Python compared to other languages, especially those with weak typing.\n\n<2024-01-15T05:14:19.224Z>\nThe lecturer delves into an example to demonstrate Python's type checking behavior using the \"less than\" operator, where unexpected comparison outcomes occur between strings and numbers.\n\n<2024-01-15T05:15:19.227Z>\nThe lecturer emphasizes the importance of exercising type discipline in coding to ensure the correct usage of operators and operands.\n\n<2024-01-15T05:17:02.223Z>\nFurther discussion involves the unconventional meanings of certain operators in Python, such as division and the order of operations for arithmetic expressions.\n\n<2024-01-15T05:18:10.218Z>\nThe lecturer continues the discussion about the order of operations, emphasizing the need to be explicit when specifying the desired order of evaluation in expressions.",
      "status": "active"
    },
    {
      "title": "MIT lecture 3",
      "note_id": "7dfafac7-faec-4c06-987f-40e4f4e1cee6",
      "markdown": "# MIT lecture 3\n\n## Programming Basics\n<2024-01-15T05:19:32.217Z> \nThe lecturer begins by summarizing the content covered in the previous lectures. They outline the basic elements of programming, including data (numbers, strings, and booleans), operations (such as addition and multiplication applicable to numbers and strings), and commands/statements for changing the flow of control. They also introduced loop mechanisms and emphasized the power of these fundamental instructions for writing common patterns of code.\n\n## Importance of Good Programming Style\n<2024-01-15T05:23:13.783Z>\nThe lecturer highlighted the significance of good programming style, emphasizing the following key points:\n- Use of comments for code clarity and debugging.\n- Type discipline to ensure expected types for operations.\n- Descriptive and meaningful variable names.\n- Testing all possible branches within the code.\nThe focus was on promoting good programming practices to write high-quality code.\n\n\n## Iterative Programs\n<2024-01-15T05:24:32.240Z>\nThe lecture concluded with a hint at building upon the basics discussed previously. The lecturer indicated the intention to delve into iterative programs, focusing on patterns of code that tackle certain classes of problems and tools to aid in understanding those pieces of code. Emphasis was placed on the selection of variables for counting within a process.\n\n<2024-01-15T05:25:24.748Z>\nThe lecturer outlined the key steps for creating an iterative program: Initializing the variable, setting up the right end test to determine loop completion, ensuring the block of code inside the loop contains instructions that change the variable being counted, and deciding what to do when the loop is done.\n\n<2024-01-15T05:26:25.548Z>\nA reminder was given that the block of code in an iterative program represents the set of instructions to be executed each time through the loop and highlighted the necessity of changing the counting variable within the block of code to avoid infinite loops. The importance of having a clear structure when mapping a problem into an iterative program was emphasized.\n\nThis section gave a high-level overview of the considerations and steps involved in creating iterative programs, with a focus on the manipulation of variables within the iterative process.",
      "status": "active"
    }
  ]
}
